---
- name: Gather required facts
  block:

    - name: Gather required facts
      ansible.builtin.setup:
        gather_subset: "!all,distribution_major_version,date_time"
      ignore_unreachable: true
      register: gathered_facts

    - name: "Gather facts failed"
      ansible.builtin.fail:
        msg: "Gather facts failed for host"
      when: gathered_facts.unreachable is defined

  rescue:

    - name: Fail with return code 1001
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_number: 1001
        rc_support: "account"
        rc_group: "misconfiguration"
        rc_message:
          "Error Message: {% if (ansible_failed_result.stderr is defined)
          %}{{ ansible_failed_result.stderr }}
          {% elif (ansible_failed_result.response is defined)
          %}{{ ansible_failed_result.response }}{% elif
          (ansible_failed_result.msg is defined) %}
          {{ ansible_failed_result.msg }}{% elif
          (ansible_failed_result.stdout is defined) %}{{
          ansible_failed_result.stdout }}
          {% else %}Please refer to the job log
          for more details{% endif %}"

    - name: Set exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Unable to connect to the remote host.\n\n"

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "Unable to connect to the remote host."
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: Invalid patching scenario
  when:
    - patching_scenario != 'alt_disk'
    - patching_scenario != 'nim_server'
    - patching_scenario != 'software_patching'
    - patching_scenario != 'restore'
    - patching_scenario != 'rootvg'
    - patching_scenario != 'apply_efixes'
    - patching_scenario != 'remove_efixes'
  block:

    - name: Return code generation in case invalid patching_scenario is provided
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "account"
        rc_group: "misconfiguration"
        rc_number: 6003
        rc_message:
          "{{ patching_scenario }} is an invalid patching scenario.
          Please refer readme file for more details."
        documentation: "{{ readme_url }}"

    - name: Set exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Invalid patching scenario.\n\n"

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "Invalid patching scenario"
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: Make sure there are no parallel executions
  ansible.builtin.include_tasks: lock_file.yml

- name: AIX patching using alt_disk method
  ansible.builtin.include_tasks: altdisk_method.yml
  when: patching_scenario == 'alt_disk'

- name: AIX patching using nim_server method
  ansible.builtin.include_tasks: nim_server_method.yml
  when: patching_scenario == 'nim_server'

- name: AIX patching using rootvg method
  ansible.builtin.include_tasks: rootvg_method.yml
  when: patching_scenario == 'rootvg'

- name: Software patching
  ansible.builtin.include_tasks: software_patching.yml
  when: patching_scenario == 'software_patching'

- name: Restore OS to the previous maintenance level using old rootvg
  ansible.builtin.include_tasks: restore.yml
  when: patching_scenario == 'restore'

- name: Apply efixes
  ansible.builtin.include_tasks: apply_efixes.yml
  when:
    - patching_scenario == 'apply_efixes'
    - efix_filesets_location | length

- name: Remove efixes
  ansible.builtin.include_tasks: remove_efixes.yml
  when:
    - patching_scenario == 'remove_efixes'
    - remove_efix_list | length
