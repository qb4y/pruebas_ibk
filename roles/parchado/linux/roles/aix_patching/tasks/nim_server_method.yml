---

- name: Run pre patching steps
  ansible.builtin.include_tasks: pre_patching_steps.yml

- name: Mount NFS volume
  ansible.builtin.include_tasks: mount_nfs.yml
  when:
    - fs_space_validation
    - continue_execution
    - nfs_path | length > 0

- name: Remove locking efixes
  when:
    - remove_locking_efixes
    - fs_space_validation
    - continue_execution
  block:

    - name: List efix labels installed on the server  # noqa risky-shell-pipe
      ansible.builtin.shell: |
        emgr -P | tail -n +4 | awk '{print $3}' | sort -u
      register: efix_labels
      changed_when: false

    - name: Uninstall locking efix
      ansible.builtin.command: /usr/sbin/emgr -r -L {{ item }}
      loop: "{{ efix_labels.stdout_lines }}"
      when: efix_labels.stdout
      changed_when: true

    - name: Commit all the applied mode filesets
      ansible.builtin.command: installp -cg all
      changed_when: true

    - name: Efix labels uninstalled successfully
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Below efix labels shave been uninstalled successfully:\n\n
          {{ efix_labels.stdout_lines }}\n\n"
      when: efix_labels.stdout

  rescue:

    - name:
        Return code generation in case of
        uninstall locking efix command failure
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "developer"
        rc_group: "component_playbook"
        rc_number: 5024
        rc_message:
          "Uninstall locking efix command has failed.
          Further investigation is required by the developer."

    - name: Set exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Uninstall locking efix command has failed.\n\n
          Aborting the patching process.\n\n"

    - name: Unmount NFS volume
      ansible.builtin.include_tasks: unmount_nfs.yml
      when:
        - nfs_path | length > 0
        - mount_success
        - unmount_nfs_after_patching

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "Uninstall locking efix command has failed"
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: OS update preview
  when:
    - fs_space_validation
    - continue_execution
  block:

    - name: OS update preview
      ansible.builtin.shell: >
        /usr/lpp/bos.sysmgt/nim/methods/c_sm_nim update_all -l
        '{{ patching_filesets_location }}' -f 'p' -f '' -f 'Y' -f '' -f ''
        -f 'g' -f 'X' -f '' -f ''
      changed_when: false
      register: os_update_preview
      failed_when: false

    - name: OS update preview command failed
      when:
        - os_update_preview.rc != 0
        - "'software is already at the same level as on the media'
          not in os_update_preview.stderr"
      ansible.builtin.fail:
        msg: "OS update preview command has failed"

  rescue:

    - name: Update exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          OS update preview command has failed.\n\n
          Aborting the patching process.\n\n"

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "developer"
        rc_group: "component_playbook"
        rc_number: 5036
        rc_message:
          "OS update preview command has failed.
          Further investigation is required by the developer."

    - name: Unmount NFS volume
      ansible.builtin.include_tasks: unmount_nfs.yml
      when:
        - nfs_path | length > 0
        - mount_success
        - unmount_nfs_after_patching

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "OS update preview command has failed"
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: OS already up-to-date
  when:
    - fs_space_validation
    - continue_execution
    - "'software is already at the same level as on the media'
      in os_update_preview.stderr"
  block:

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_success: true

    - name: Update exec_message and continue_execution flag
      ansible.builtin.set_fact:
        os_update_verification: true
        continue_execution: false
        exec_message:
          "{{ exec_message }}
          OS is already up-to-date. No update required at the moment.\n\n"

- name: OS update pre-installation verification failed
  when:
    - fs_space_validation
    - continue_execution
    - os_update_preview.rc == 0
    - "'this section passed pre-installation verification' not in
      os_update_preview.stdout"
  block:

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "account"
        rc_group: "misconfiguration"
        rc_number: 6004
        rc_message:
          "OS update pre-installation verification has failed.
          Complete the pre-reqs and try again"

    - name: Update exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          OS update pre-installation verification has failed.\n\n
          Aborting the patching process.\n\n"

    - name: Unmount NFS volume
      ansible.builtin.include_tasks: unmount_nfs.yml
      when:
        - nfs_path | length > 0
        - mount_success
        - unmount_nfs_after_patching

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "OS update pre-installation verification has failed"
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: OS update
  when:
    - fs_space_validation
    - continue_execution
  block:

    - name: OS update
      ansible.builtin.shell: >
        /usr/lpp/bos.sysmgt/nim/methods/c_sm_nim update_all -l
        '{{ patching_filesets_location }}' -f '' -f '' -f 'Y' -f '' -f ''
        -f 'g' -f 'X' -f '' -f ''
      register: os_update
      changed_when: true
      when:
        - os_update_preview.rc == 0
        - "'this section passed pre-installation verification' in
          os_update_preview.stdout"

    - name: OS update successful
      when:
        - os_update is not skipped
        - os_update.rc == 0
      block:

        - name: Update exec_message
          ansible.builtin.set_fact:
            os_update_verification: true
            exec_message:
              "{{ exec_message }}
              OS update is successful.\n\n"

        - name: Set returncode
          ansible.builtin.include_role:
            name: returncode
          vars:
            rc_success: true

    - name: Get oslevel
      ansible.builtin.command: oslevel -s
      changed_when: false
      register: post_patch_oslevel

  rescue:

    - name:
        Return code generation in case of
        os update failure
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "developer"
        rc_group: "component_playbook"
        rc_number: 5037
        rc_message:
          "OS update has failed.
          Further investigation is required by the developer."

    - name: Set exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          OS update has failed.\n\n"

    - name: Unmount NFS volume
      ansible.builtin.include_tasks: unmount_nfs.yml
      when:
        - nfs_path | length > 0
        - mount_success
        - unmount_nfs_after_patching

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "OS update has failed"
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: Apply efixes
  when:
    - efix_filesets_location | length
    - os_update_verification
    - continue_execution
  block:

    - name: Fetch list of efixes to be applied
      ansible.builtin.find:
        paths: "{{ efix_filesets_location }}"
        patterns: "*epkg.Z"
      register: efix_list
      changed_when: false

    - name: Create a list of efixes
      ansible.builtin.set_fact:
        efix_list:
          "{{ efix_list.files | map(attribute='path') | list }}"

    - name: Apply efixes
      ansible.builtin.command:
        emgr -e {{ item }}
      loop: "{{ efix_list }}"
      changed_when: true
      when: efix_list | length > 0

    - name: Applying efixes successful
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Successfully applied below efixes:\n\n
          {{ efix_list }}\n\n"
      when: efix_list | length > 0

  rescue:

    - name:
        Return code generation in case of
        applying efixes fails
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "developer"
        rc_group: "component_playbook"
        rc_number: 5040
        rc_message:
          "Applying efixes has failed.
          Further investigation is required by the developer."

    - name: Set exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Applying efixes has failed.\n\n
          Aborting the patching process.\n\n"

    - name: Unmount NFS volume
      ansible.builtin.include_tasks: unmount_nfs.yml
      when:
        - nfs_path | length > 0
        - mount_success
        - unmount_nfs_after_patching

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "Applying efixes has failed"
      when: fail_on_error | bool

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: Run post patching steps
  ansible.builtin.include_tasks: post_patching_steps.yml
  when:
    - fs_space_validation
    - continue_execution

- name: Unmount NFS volume
  ansible.builtin.include_tasks: unmount_nfs.yml
  when:
    - nfs_path | length > 0
    - mount_success
    - unmount_nfs_after_patching
