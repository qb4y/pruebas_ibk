---

- name: Patching based on severity
  block:

    - name: Fetch patch list
      delegate_to: localhost
      ansible.builtin.command: |
        cat {{ hostvars['localhost']['base_dir'] }}/{{ results_file_name_json }}
      register: patch_list_json
      changed_when: false

    - name: Decode the JSON content
      ansible.builtin.set_fact:
        patch_list_dict: "{{ patch_list_json.stdout | from_json }}"

    - name: Fetch severity
      ansible.builtin.set_fact:
        severity: "{{ patch_type | regex_replace('\\w+_(\\w+)', '\\1') }}"

    - name:
        Get the list of {{ severity }} severity
        patches  # noqa name[template] risky-shell-pipe
      ansible.builtin.set_fact:
        severity_patch_list:
          "{{ severity_patch_list + item.DESCRIPTION |
          regex_replace('^\\W?(\\w+-\\d+:\\d+).*$', '\\1') + ',' }}"
      loop: "{{ patch_list_dict.host_details.patch_details }}"
      when:
        - patch_type != "severity_all"
        - item.SEV | upper == severity[0] | upper

    - name: Get the list of all applicable patches  # noqa risky-shell-pipe
      ansible.builtin.set_fact:
        severity_patch_list:
          "{{ severity_patch_list + item.DESCRIPTION |
          regex_replace('^\\W?(\\w+-\\d+:\\d+).*$', '\\1') + ',' }}"
      loop: "{{ patch_list_dict.host_details.patch_details }}"
      when: patch_type == "severity_all"

    - name: Trim severity_patch_list
      ansible.builtin.set_fact:
        severity_patch_list:
          "{{ severity_patch_list | regex_replace(',$', '') }}"

    - name: Install patches  # noqa command-instead-of-module
      ansible.builtin.command:
        yum -y update-minimal --advisory="{{ item }}"
      register: severity_patches_result
      changed_when:
        - "'No packages marked for update'
          not in severity_patches_result.stdout"
        - "'Nothing to do' not in severity_patches_result.stdout"
      loop: "{{ severity_patch_list.split(',') | unique }}"
      when: severity_patch_list | length
      async: "{{ async_value }}"
      poll: "{{ poll_value }}"

  rescue:

    - name: Return code incase patching based on severity fails
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_support: "developer"
        rc_group: "component_playbook"
        rc_number: 5053
        rc_message: "Patching based on severity has failed."

    - name: Failure - patches not installed
      ansible.builtin.set_fact:
        patch_status: 'failure'
        exec_message:
          "{{ exec_message }}
          Patching result:\n\n
          Patch installation FAILED, please perform manual patching.\n\n"

    - name: Send communication
      ansible.builtin.include_tasks: send_notification.yml

    - name: Remove lock file
      ansible.builtin.file:
        path:
          /etc/ansible/facts.d{{
          '' if lock_file_dir.changed else '/unix_patching.fact' }}
        state: absent

    - name: End the job for the host {{ inventory_hostname }}
      ansible.builtin.fail:
        msg: "Patching based on severity has failed"
      when:
        - fail_on_error | bool
        - not teams_notification

    - name: Set continue_execution flag
      ansible.builtin.set_fact:
        continue_execution: false

- name: Consolidate output
  when: severity_patches_result is not skipped
  block:

    - name: Get the list of packages installed by playbook
      ansible.builtin.set_fact:
        installed_packages: "{{ installed_packages }} + ['{{ item.item }}']"
      loop: "{{ severity_patches_result.results }}"
      when:
        - item.rc == 0
        - item.changed

    - name: Get the list of up-to-date packages
      ansible.builtin.set_fact:
        up_to_date_packages: "{{ up_to_date_packages }} + ['{{ item.item }}']"
      loop: "{{ severity_patches_result.results }}"
      when:
        - item.rc == 0
        - not item.changed
        - "'Nothing to do' in item.stdout"

    - name: Get the list of missing packages
      ansible.builtin.set_fact:
        missing_packages: "{{ missing_packages }} + ['{{ item.item }}']"
      loop: "{{ severity_patches_result.results }}"
      when:
        - item.rc == 0
        - not item.changed
        - "'No packages marked for update' in item.stdout"

    - name: Get the list of failed packages
      ansible.builtin.set_fact:
        failed_packages: "{{ failed_packages }} + ['{{ item.item }}']"
      loop: "{{ severity_patches_result.results }}"
      when:
        - item.rc != 0

    - name: Set exec_message
      ansible.builtin.set_fact:
        exec_message:
          "{{ exec_message }}
          Patching result:\n\n
          Applying {{ severity }} severity patches.\n\n
          Detailed result:\n\n
          Successfully installed packages:\n\n
          {{ installed_packages | to_yaml }}\n\n
          Up-to-date packages:\n\n
          {{ up_to_date_packages | to_yaml }}\n\n
          Missing packages:\n\n
          {{ missing_packages | to_yaml }}\n\n
          Failed packages:\n\n
          {{ failed_packages | to_yaml }}\n\n"

    - name: Set patch_status
      ansible.builtin.set_fact:
        patch_status: 'success'
      when: installed_packages | length

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_success: true
        rc_message: "Patches installed successfully"
      when: installed_packages | length

    - name: Set patch_status
      ansible.builtin.set_fact:
        patch_status: 'nothing_to_do'
      when:
        - not installed_packages | length
        - up_to_date_packages | length

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_success: true
        rc_message: "Nothing to do here, all packages are up to date"
      when:
        - not installed_packages | length
        - up_to_date_packages | length

- name: Nothing to do
  when: severity_patches_result is skipped
  block:

    - name: Set exec_message
      ansible.builtin.set_fact:
        patch_status: 'nothing_to_do'
        exec_message:
          "{{ exec_message }}
          Patching result:\n\n
          There are no patches to be applied.\n\n"

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_success: true
        rc_message: "Nothing to do here, all packages are up to date"
