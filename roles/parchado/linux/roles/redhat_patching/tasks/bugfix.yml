---
- name: Running bugfix_all on host
  block:

    - name: Running bugfix_all for version 7 and below  # noqa package-latest
      ansible.builtin.yum:
        name: '*'
        bugfix: true
        exclude: "{{ yum_exclude_patch_list }}"
        state: latest
        update_cache: true
        lock_timeout: 180
        enablerepo: "{{ enable_repo }}"
        disablerepo: "{{ disable_repo }}"
        disable_gpg_check: "{{ disable_gpg_check }}"
      register: yum_bugfix_result
      async: "{{ async_value }}"
      poll: "{{ poll_value }}"
      when: ansible_distribution_major_version | int < 8
      ignore_errors: true

    - name: Running bugfix_all for version 8 and above  # noqa package-latest
      ansible.builtin.dnf:
        name: '*'
        bugfix: true
        exclude: "{{ yum_exclude_patch_list }}"
        state: latest
        update_cache: true
        lock_timeout: 180
        enablerepo: "{{ enable_repo }}"
        disablerepo: "{{ disable_repo }}"
        disable_gpg_check: "{{ disable_gpg_check }}"
      register: dnf_bugfix_result
      async: "{{ async_value }}"
      poll: "{{ poll_value }}"
      when: ansible_distribution_major_version | int >= 8
      ignore_errors: true

    - name: Set patching result
      ansible.builtin.set_fact:
        bugfix_result:
          "{% if yum_bugfix_result is not skipped
          %}{{ yum_bugfix_result }}{% else
          %}{{ dnf_bugfix_result }}{% endif %}"

    - name: Fail the execution
      ansible.builtin.fail:
        msg: "Failed to run bugfix_all patching"
      when: bugfix_result is failed

  rescue:

    - name:
        Retry patching in case of yum lock
        issue  # noqa command-instead-of-module
      ansible.builtin.command:
        yum -y update --bugfix -x '{{ yum_exclude_patch_list }}'
      when: "'yum lockfile is held by another process' in bugfix_result.msg"
      register: retry_bugfix_result
      failed_when: false
      async: "{{ async_value }}"
      poll: "{{ poll_value }}"
      changed_when: true

    - name: Return code incase of redhat bugfix_all patch update fails
      when:
        (bugfix_result is failed and
        retry_bugfix_result is skipped) or
        (retry_bugfix_result is not skipped and
        retry_bugfix_result.rc != 0)
      block:

        - name: Return code incase of redhat bugfix_all patch update fails
          ansible.builtin.include_role:
            name: returncode
          vars:
            rc_support: "developer"
            rc_group: "component_playbook"
            rc_number: 5010
            rc_message:
              "Redhat bugfix_all patching failed.
              Below is the error:
              {{ bugfix_result.msg }}"

        - name: Failure - patches not installed
          ansible.builtin.set_fact:
            patch_status: 'failure'
            exec_message:
              "{{ exec_message }}
              Patching result:\n\n
              Patch installation FAILED, please perform manual patching.\n\n"

        - name: Send communication
          ansible.builtin.include_tasks: send_notification.yml

        - name: Remove lock file
          ansible.builtin.file:
            path:
              /etc/ansible/facts.d{{
              '' if lock_file_dir.changed else '/unix_patching.fact' }}
            state: absent

        - name: End the job for the host {{ inventory_hostname }}
          ansible.builtin.fail:
            msg: "Redhat bugfix_all patching failed"
          when:
            - fail_on_error | bool
            - not teams_notification

        - name: Set continue_execution flag
          ansible.builtin.set_fact:
            continue_execution: false

# Nothing to do here, all packages are up to date
- name: Nothing to do here, all packages are up to date
  when:
    - bugfix_result is not failed or
      (retry_bugfix_result is defined and
      retry_bugfix_result.rc == 0)
    - not bugfix_result.changed or
      (retry_bugfix_result is defined and
      'Nothing to do' in retry_bugfix_result.stdout)
  block:

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_success: true
        rc_message: "Nothing to do here, all packages are up to date"

    - name: Set exec_message
      ansible.builtin.set_fact:
        patch_status: 'nothing_to_do'
        exec_message:
          "{{ exec_message }}
          Patching result:\n\n
          Nothing to do here, all packages are up to date\n\n"

- name: Patches installed successfully
  when:
    - patch_status != 'nothing_to_do'
    - bugfix_result is not failed or
      (retry_bugfix_result is defined and
      retry_bugfix_result.rc == 0)
  block:

    - name: Set returncode
      ansible.builtin.include_role:
        name: returncode
      vars:
        rc_success: true
        rc_message: "Patches installed successfully"

    - name: Set exec_message
      ansible.builtin.set_fact:
        patch_status: 'success'
        exec_message:
          "{{ exec_message }}
          Patching result:\n\n
          Patches installed successfully.\n\n"
