---
# Módulo: Core Creación VM Linux
# Función: Crear VM con customización VMware CORRECTA (esperar que funcione)

- name: "Crear VM Linux con customización VMware (ESPERAR que funcione)"
  community.vmware.vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ validate_certs | default(false) | bool }}"
    annotation: "{{ annotation | default('VM Linux creada por Ansible - Customización VMware') }}"
    cluster: "{{ cluster | default(omit) }}"
    convert: "{{ disk_type | default('thin') }}"
    customization: "{{ customization | default({}) }}"
    datacenter: "{{ datacenter }}"
    datastore: "{{ datastore | default(omit) }}"
    disk: "{{ [disk] if disk is mapping else disk | default([]) }}"
    folder: "/{{ datacenter }}/vm/{{ folder }}"
    hardware: "{{ hardware | default({}) }}"
    name: "{{ vm_hostname }}"
    networks: "{{ networks }}"
    resource_pool: "{{ resource_pool | default(omit) }}"
    state: "{{ state | default('powered-on') }}"
    template: "{{ vm_template }}"
    # CRÍTICO: ESPERAR customización VMware (que funcione correctamente)
    wait_for_customization: true               # ESPERAR customización
    wait_for_ip_address: true                  # ESPERAR IP
    state_change_timeout: 600                  # 10 minutos para customización
    force: false                               # No forzar, que VMware maneje duplicados
  register: vm_creation_status
  tags: [crear_vm_core_linux, crear_vm]

#- name: "VERIFICACIÓN FINAL: VM Linux completamente configurada"
#  community.vmware.vmware_guest_info:
#    hostname: "{{ vcenter_hostname }}"
#    username: "{{ vcenter_username }}"
#    password: "{{ vcenter_password }}"
#    validate_certs: "{{ validate_certs | default(false) | bool }}"
#    datacenter: "{{ datacenter }}"
#    name: "{{ vm_hostname }}"
#  register: vm_final_check
#  until:
#    # VERIFICACIÓN FINAL: TODO CONFIGURADO CORRECTAMENTE POR VMWARE
#    - vm_final_check.instance is defined
#    - >
#      (vm_final_check.instance.runtime.powerState | default('') == "poweredOn") or
#      (vm_final_check.instance.hw_power_state | default('') == "poweredOn") or
#      (vm_final_check.instance.power_state | default('') == "POWERED_ON")
#    - vm_final_check.instance.ipv4 is defined
#    - vm_final_check.instance.ipv4 == networks[0].ip  # IP correcta
#    - vm_final_check.instance.guest is defined
#    - vm_final_check.instance.guest.hostname is defined  
#    - vm_final_check.instance.guest.hostname | lower == (customization.hostname + '.' + customization.domain) | lower  # Hostname correcto
#  retries: 5         # 5 intentos adicionales después de customización
#  delay: 60          # Cada 1 minuto
#  failed_when: false
#  tags: [crear_vm_core_linux, verificacion_final]

#- name: "RESULTADO FINAL VM LINUX (JSON)"
#  ansible.builtin.debug:
#    msg: "{{ vm_resultado_final | to_json }}"
#  vars:
#    vm_resultado_final:
#      vm_name: "{{ vm_hostname }}"
#      ip_address: "{{ vm_final_check.instance.ipv4 }}"
#      hostname: "{{ vm_final_check.instance.guest.hostname }}"
#      username: "root"
#      password: "i20unix06b"
#      ssh_port: 22
#      os_type: "linux"
#  tags: [crear_vm_core_linux, resultado_final] 