---
- name: üß† Recolectar facts si no est√°n presentes (Windows)
  ansible.builtin.setup:
  when: ansible_os_family is not defined

- name: Definir rutas de instalaci√≥n
  set_fact:
    local_dir: "C:\\Temp"
    installer_name: "WindowsSensor.MaverickGyr.exe"
    cert_names:
      - "DigiCertHighAssuranceEVRootCA.crt"
      - "DigiCertAssuredIDRootCA.crt"

- name: Definir rutas completas
  set_fact:
    local_installer_path: "{{ local_dir }}\\{{ installer_name }}"

# VERIFICACI√ìN DE INSTALACI√ìN PREVIA
- name: Verificar si CrowdStrike ya est√° instalado (m√©todo m√∫ltiple)
  win_shell: |
    # M√©todo 1: Verificar servicios de CrowdStrike
    $services = Get-Service -Name "CSAgent","CSFalconService" -ErrorAction SilentlyContinue
    $servicesFound = $services.Count -gt 0
    
    # M√©todo 2: Verificar registro de instalaci√≥n
    $regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*"
    $regInstalled = Get-ItemProperty $regPath | Where-Object { $_.DisplayName -like '*CrowdStrike*' -or $_.DisplayName -like '*Falcon*' }
    $regFound = $regInstalled -ne $null
    
    # M√©todo 3: Verificar archivos del sistema
    $falconPath = "C:\Windows\System32\drivers\CrowdStrike"
    $filesFound = Test-Path $falconPath
    
    # M√©todo 4: Verificar procesos
    $processes = Get-Process -Name "*falcon*","*crowdstrike*" -ErrorAction SilentlyContinue
    $processFound = $processes.Count -gt 0
    
    Write-Output "Services: $servicesFound"
    Write-Output "Registry: $regFound" 
    Write-Output "Files: $filesFound"
    Write-Output "Processes: $processFound"
    
    if ($servicesFound -or $regFound -or $filesFound -or $processFound) {
      Write-Output "INSTALLED"
      if ($regInstalled) {
        $regInstalled | Select-Object DisplayName, DisplayVersion | Format-List
      }
      if ($services) {
        $services | Select-Object Name, Status | Format-List
      }
    } else {
      Write-Output "NOT_INSTALLED"
    }
  register: crowdstrike_check
  args:
    executable: powershell.exe

- name: Mostrar estado de instalaci√≥n actual
  debug:
    msg: |
      üîç Estado de CrowdStrike: {{ 'Ya instalado' if 'INSTALLED' in crowdstrike_check.stdout else 'No instalado' }}
      üìã Detalles: {{ crowdstrike_check.stdout }}

- name: Marcar que CrowdStrike ya est√° instalado
  set_fact:
    crowdstrike_already_installed: true
  when: "'INSTALLED' in crowdstrike_check.stdout"

- name: Marcar que CrowdStrike NO est√° instalado
  set_fact:
    crowdstrike_already_installed: false
  when: "'NOT_INSTALLED' in crowdstrike_check.stdout"

# PROCESO DE INSTALACI√ìN (Solo si no est√° instalado)
- name: Crear carpeta local para instaladores
  win_file:
    path: "{{ local_dir }}"
    state: directory
  when: not crowdstrike_already_installed

- name: Verificar si el instalador ya existe
  win_stat:
    path: "{{ local_installer_path }}"
  register: installer_exists
  when: not crowdstrike_already_installed

- name: Mostrar informaci√≥n de descarga
  debug:
    msg: |
      üîó URL pre-firmada: {{ crowdstrike_installer_url }}
      üìÅ Destino: {{ local_installer_path }}
      ‚è∞ URL expira en 10 minutos
  when: not crowdstrike_already_installed

- name: Descargar instalador CrowdStrike desde MinIO (URL pre-firmada)
  win_get_url:
    url: "{{ crowdstrike_installer_url }}"
    dest: "{{ local_installer_path }}"
    timeout: 300
    follow_redirects: all
  register: download_result
  when: 
    - not crowdstrike_already_installed
    - not installer_exists.stat.exists or (installer_exists.stat.size < 10000000)

- name: Mostrar resultado de descarga
  debug:
    msg: |
      üì• Descarga: {{ 'Exitosa' if download_result.changed else 'Omitida' }}
      üìä Estado: {{ download_result.status_code | default('N/A') }}
      üìè Tama√±o: {{ download_result.size | default('N/A') }} bytes
  when: not crowdstrike_already_installed

# Descargar certificados desde MinIO usando URLs pre-firmadas
- name: Descargar certificados desde MinIO (URLs pre-firmadas)
  win_get_url:
    url: "{{ item }}"
    dest: "{{ local_dir }}\\{{ cert_names[ansible_loop.index0] }}"
    timeout: 60
    follow_redirects: all
  loop: "{{ crowdstrike_cert_urls }}"
  loop_control:
    extended: true
  register: cert_downloads
  when: 
    - crowdstrike_cert_urls | length > 0
    - not crowdstrike_already_installed

- name: Mostrar resultado de descarga de certificados
  debug:
    msg: |
      üì• Certificado {{ ansible_loop.index }}: {{ 'Descargado' if item.changed else 'Ya exist√≠a' }}
      üìÅ Ruta: {{ local_dir }}\{{ cert_names[ansible_loop.index0] }}
  loop: "{{ cert_downloads.results | default([]) }}"
  loop_control:
    extended: true
  when: 
    - crowdstrike_cert_urls | length > 0
    - not crowdstrike_already_installed

- name: Verificar descarga del instalador
  win_stat:
    path: "{{ local_installer_path }}"
  register: installer_final_check
  when: not crowdstrike_already_installed

- name: Validar que el instalador es real
  ansible.builtin.fail:
    msg: |
      ‚ùå Error: No se pudo descargar un instalador v√°lido desde MinIO
      üìè Tama√±o: {{ installer_final_check.stat.size | default(0) }} bytes 
      üîç Verifica que los archivos existan en MinIO y que las URLs no hayan expirado
      ‚è∞ Las URLs pre-firmadas expiran en 10 minutos
  when: 
    - not crowdstrike_already_installed
    - not installer_final_check.stat.exists or installer_final_check.stat.size < 10000000

- name: Verificar si certificados fueron descargados
  win_stat:
    path: "{{ local_dir }}\\{{ item }}"
  loop: "{{ cert_names }}"
  register: cert_files_check
  when: 
    - crowdstrike_cert_urls | length > 0
    - not crowdstrike_already_installed

- name: Mostrar estado de archivos de certificados
  debug:
    msg: |
      üìú Certificado: {{ item.item }}
      ‚úÖ Existe: {{ 'S√≠' if item.stat.exists else 'No' }}
      üìè Tama√±o: {{ item.stat.size | default('N/A') }} bytes
  loop: "{{ cert_files_check.results | default([]) }}"
  when: 
    - crowdstrike_cert_urls | length > 0
    - not crowdstrike_already_installed

# INSTALACI√ìN DE CERTIFICADOS COMENTADA - Causan colgado pero no son necesarios
- name: Saltar instalaci√≥n de certificados (por ahora)
  debug:
    msg: |
      üîÑ Saltando instalaci√≥n de certificados en el Certificate Store
      üìú Archivos descargados pero no instalados (Windows ya tiene DigiCert)
      ‚ö° Esto evita el colgado en win_certificate_store
      üìÅ Certificados disponibles en: {{ local_dir }}
      üí° Para reactivar: descomenta las tareas de instalaci√≥n m√°s abajo
  when: not crowdstrike_already_installed

# - name: Instalar certificados en Certificate Store
#   win_certificate_store:
#     path: "{{ local_dir }}\\{{ item }}"
#     store_location: LocalMachine
#     store_name: Root
#     state: present
#   loop: "{{ cert_names }}"
#   ignore_errors: true
#   when: 
#     - crowdstrike_cert_urls | length > 0
#     - not crowdstrike_already_installed

- name: Instalar CrowdStrike Falcon Sensor
  win_package:
    path: "{{ local_installer_path }}"
    arguments: '/install /quiet /norestart CID={{ crowdstrike_customer_id }}'
    state: present
  register: install_result
  failed_when: false  # No fallar autom√°ticamente, manejaremos los errores manualmente
  when: not crowdstrike_already_installed

- name: Analizar resultado de instalaci√≥n
  debug:
    msg: |
      üìä C√≥digo de retorno: {{ install_result.rc | default('N/A') }}
      üìù Mensaje: {{ install_result.msg | default('N/A') }}
      üì§ Stdout: {{ install_result.stdout | default('Vac√≠o') }}
      üì§ Stderr: {{ install_result.stderr | default('Vac√≠o') }}
      üîÑ Reinicio requerido: {{ install_result.reboot_required | default(false) }}
  when: 
    - not crowdstrike_already_installed
    - install_result is defined

- name: Evaluar c√≥digos de error de instalaci√≥n
  set_fact:
    installation_success: >-
      {{
        install_result.rc == 0 or
        install_result.rc == 24578 or
        install_result.rc == 3010 or
        install_result.rc == 1641
      }}
  when: 
    - not crowdstrike_already_installed
    - install_result is defined

- name: Mostrar interpretaci√≥n del c√≥digo de error
  debug:
    msg: |
      üîç Interpretaci√≥n del c√≥digo {{ install_result.rc | default('N/A') }}:
      {% if install_result.rc == 0 %}
      ‚úÖ Instalaci√≥n exitosa
      {% elif install_result.rc == 24578 %}
      ‚ö†Ô∏è  Ya existe una instalaci√≥n (esto es normal si CrowdStrike ya estaba parcialmente instalado)
      {% elif install_result.rc == 3010 %}
      ‚ö†Ô∏è  Instalaci√≥n exitosa - Reinicio pendiente
      {% elif install_result.rc == 1641 %}
      ‚ö†Ô∏è  Instalaci√≥n exitosa - Reinicio iniciado por el instalador
      {% else %}
      ‚ùå Error desconocido - C√≥digo: {{ install_result.rc }}
      {% endif %}
  when: 
    - not crowdstrike_already_installed
    - install_result is defined

- name: Validar instalaci√≥n exitosa
  fail:
    msg: |
      ‚ùå Fall√≥ la instalaci√≥n de CrowdStrike Falcon Sensor.
      üìä C√≥digo de retorno: {{ install_result.rc | default('N/A') }}
      üìù Mensaje: {{ install_result.msg | default('N/A') }}
      üí° Revisa los logs del sistema para m√°s detalles.
  when: 
    - not crowdstrike_already_installed
    - install_result is defined
    - not installation_success

- name: Mostrar mensaje si ya estaba instalado
  debug:
    msg: |
      ‚úÖ CrowdStrike ya estaba instalado en este servidor
      üîÑ Saltando proceso de instalaci√≥n
      üìã Procediendo a verificar servicios...
  when: crowdstrike_already_installed

- name: Esperar a que los servicios se inicialicen
  ansible.builtin.pause:
    seconds: 10
  when: not crowdstrike_already_installed

# VERIFICACI√ìN DE SERVICIOS (Siempre se ejecuta)
- name: Verificar servicios de CrowdStrike
  win_shell: |
    # Buscar todos los servicios relacionados con CrowdStrike/Falcon
    $allServices = Get-Service -ErrorAction SilentlyContinue | Where-Object { 
      $_.Name -like '*crowdstrike*' -or 
      $_.Name -like '*falcon*' -or 
      $_.Name -like '*cs*' -or
      $_.DisplayName -like '*crowdstrike*' -or 
      $_.DisplayName -like '*falcon*'
    }
    
    # Servicios espec√≠ficos que esperamos
    $csAgent = Get-Service -Name 'CSAgent' -ErrorAction SilentlyContinue
    $csFalcon = Get-Service -Name 'CSFalconService' -ErrorAction SilentlyContinue
    
    Write-Output '=== SERVICIOS CROWDSTRIKE ENCONTRADOS ==='
    if ($allServices) {
      $allServices | Select-Object Name, DisplayName, Status | Format-Table -AutoSize
    } else {
      Write-Output 'No se encontraron servicios de CrowdStrike'
    }
    
    Write-Output '=== SERVICIOS ESPEC√çFICOS ==='
    if ($csAgent) {
      Write-Output "CSAgent: $($csAgent.Status)"
    } else {
      Write-Output 'CSAgent: NOT_FOUND'
    }
    
    if ($csFalcon) {
      Write-Output "CSFalconService: $($csFalcon.Status)"
    } else {
      Write-Output 'CSFalconService: NOT_FOUND'
    }
    
    # Determinar si los servicios est√°n funcionando
    $servicesRunning = ($csAgent -and $csAgent.Status -eq 'Running') -or 
                      ($csFalcon -and $csFalcon.Status -eq 'Running') -or
                      ($allServices | Where-Object { $_.Status -eq 'Running' }).Count -gt 0
    
    Write-Output "SERVICES_STATUS: $servicesRunning"
  register: crowdstrike_services_check
  args:
    executable: powershell.exe

- name: Mostrar estado de servicios
  debug:
    msg: |
      üîç Verificaci√≥n de servicios de CrowdStrike:
      {{ crowdstrike_services_check.stdout }}

- name: Evaluar estado de servicios
  set_fact:
    services_running: "{{ 'True' in crowdstrike_services_check.stdout }}"

- name: Verificaci√≥n post-instalaci√≥n (m√©todo m√∫ltiple)
  win_shell: |
    # Re-verificar despu√©s de la instalaci√≥n
    $services = Get-Service -Name 'CSAgent','CSFalconService' -ErrorAction SilentlyContinue
    $servicesFound = $services.Count -gt 0
    
    $regPath = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*'
    $regInstalled = Get-ItemProperty $regPath | Where-Object { $_.DisplayName -like '*CrowdStrike*' -or $_.DisplayName -like '*Falcon*' }
    $regFound = $regInstalled -ne $null
    
    $falconPath = 'C:\Windows\System32\drivers\CrowdStrike'
    $filesFound = Test-Path $falconPath
    
    Write-Output "POST_INSTALL_CHECK:"
    Write-Output "Services: $servicesFound"
    Write-Output "Registry: $regFound" 
    Write-Output "Files: $filesFound"
    
    $isInstalled = $servicesFound -or $regFound -or $filesFound
    Write-Output "CROWDSTRIKE_DETECTED: $isInstalled"
  register: post_install_check
  args:
    executable: powershell.exe

- name: Mostrar verificaci√≥n post-instalaci√≥n
  debug:
    msg: |
      üîç Verificaci√≥n post-instalaci√≥n:
      {{ post_install_check.stdout }}

- name: Validar estado de los servicios
  fail:
    msg: |
      ‚ùå Los servicios de CrowdStrike no est√°n corriendo correctamente.
      üîç Detalles servicios: {{ crowdstrike_services_check.stdout }}
      ÔøΩ Verificaci√≥n post-instalaci√≥n: {{ post_install_check.stdout }}
      ÔøΩüí° Puede que CrowdStrike necesite m√°s tiempo para inicializar o un reinicio del sistema.
      üìã C√≥digo de instalaci√≥n: {{ install_result.rc | default('N/A') }} (24578 = ya existe instalaci√≥n)
  when: 
    - not services_running
    - "'True' not in post_install_check.stdout"

- name: ‚úÖ Confirmaci√≥n de instalaci√≥n exitosa
  debug:
    msg: |
      ‚úÖ CrowdStrike Falcon Sensor {{ 'ya estaba instalado y est√°' if crowdstrike_already_installed else 'instalado correctamente y' }} funcionando en {{ inventory_hostname }}
      üìä Servicios: {{ 'Running' if services_running else 'No detectados en ejecuci√≥n' }}
      üîó Consola: {{ crowdstrike_console_url }}
      üÜî Customer ID: {{ crowdstrike_customer_id }}
      üí° Si los servicios no aparecen como 'Running', puede requerir un reinicio del sistema.